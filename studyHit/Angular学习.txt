在 Windows 上安装 Yeoman教程:http://www.tuicool.com/articles/VJJZza

angularjs学习教程:http://www.runoob.com/angularjs/angularjs-tables.html

1、 JSON相关API
	1)	angular.fromJSON()  把一个字符串解析成一个对象或者对象数组。
		例：
		解析成对象：
		var json='{"name":"lisi","password":"321"}'；
		var obj=angular.fromJSON(json);
		alert(obj.name);

		解析成对象数组：
		var jsonArr='[{"name":"zhangsan","password":"123"},{"name":"lisi","password":"321"}]';
		var objArr=angular.fromJSON(jsonArr);
		alert(objArr[0].name);
		alert(objArr[1].password);

	2)  angular.toJSON()  把对象转化成JSON字符串
		例：
		var obj={name:"liSi",password:"321"};
		var str=angular.toJSON(obj,true);
2、 转换相关API
	1)	angular.uppercase()  将字符串转换为大写
	2)	angular.lowercase()  将字符串转换为小写
	    例：
	    var a="JOHN";
	    var b=angular.lowercase(a);

	3)	angular.copy(source, [destination])	数组或对象深度拷贝
		例：
		var master={firstName:"john",lastName:"Doe"};
		var user=angular.copy(master);

	4)	angular.forEach(obj,iterator,[context])	对象或数组的迭代函数
	    参数：iterator：迭代函数
	    	  context：迭代函数中上下文
		例：
		迭代对象：
		var obj = {name: 'xxx', country: 'China'};
		angular.forEach(obj, function (value, key) {
		    console.log(key + ':' + value);
		});
		//$ name:xxx
		//$ country:China

        迭代数组：
		var array = ['xxx', 'yyy'];
		angular.forEach(array, function (item, index) {
		    console.log(index + ':' + item + ' form ' + this.country);
		}, obj);
		//$ 0:xxx form China
		//$ 1:yyy form China
	5)	angular.equals(o1, o2)  正常比较和对象的深比较
		例：
		angular.equals(3, 3); //$ true
		angular.equals(NaN,NaN); //$ true
		angular.equals({name:'xxx'},{name:'xxx'}); //$ true
		angular.equals({name:'xxx'},{name:'yyy'}); //$ false
	6)	angular.extend(dst, src)	对象的拓展
		参数：dst：拓展的对象
			  src：源对象
		返回：拓展的对象
		例：
		var dst = {name: 'xxx', country: 'China'};
		var src = {name: 'yyy', age: 10};
		angular.extend(dst, src);
		console.log(src); //$ Object {name: "yyy", age: 10}
		console.log(dst); //$ Object {name: "yyy", country: "China", age: 10}

	7)	angular.isArray()	如果引用的是数组返回 true
		angular.isDate()	如果引用的是日期返回 true
		angular.isNumber()	如果引用的是数字返回 true
		angular.isString()	如果引用的是字符串返回 true		
		angular.isElement()	如果引用的是 DOM 元素返回 true
		angular.isFunction()	如果引用的是函数返回 true		
		angular.isObject()	如果引用的是对象返回 true		
		angular.isUndefined()	如果引用的未定义返回 true
		angular.isDefined()	如果引用的已定义返回 true

3、	AngularJS 验证属性
	1)	$dirty	表单有填写记录
	2)	$valid	字段内容合法的
	3)	$invalid	字段内容是非法的
	4)	$pristine	表单没有填写记录
	5)	$error   错误
	6)	required 必填项验证
	7)	ng-minlength="5" 最小长度
	8)	ng-maxlength="20"	最大长度
	9)	ng-pattern="/[a-zA-Z]/" 模式匹配
	10)	type="email"	电子邮件
	11)	type="number"	数字
	12) type="url"	URL
	例：
		<p>邮箱:<br>
		  <input type="email" name="email" ng-model="email" required>
		  <span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
		  <span ng-show="myForm.email.$error.required">邮箱是必须的。</span>
		  <span ng-show="myForm.email.$error.email">非法的邮箱。</span>
		  </span>
		</p>

4、 AngularJS 支持以下事件
		ng-click
		ng-dblclick
		ng-mousedown
		ng-mouseenter
		ng-mouseleave
		ng-mousemove
		ng-keydown
		ng-keyup
		ng-keypress
		ng-change
		ng-blur
		ng-copy	规定拷贝事件的行为
		ng-csp	修改内容的安全策略
		ng-cut	规定剪切事件的行为
		ng-focus	规定聚焦事件的行为
		ng-paste	规定粘贴事件的行为

5、 AngularJS 指令
	1)	ng-app	定义应用程序的根元素。
	2)	ng-controller	定义应用的控制器对象
	3)	ng-bind		绑定 HTML 元素到应用程序数据(单项的，只能把controller里面的变量值展示在view中)
	17)	ng-model	绑定了 HTML 表单元素到 scope 变量中。(是双向绑定的)
		如果 scope 中不存在变量, 将会创建它。
	27)	ng-model-options	规定如何更新模型(angular-1.3新出的一个指令)
		你可以指定绑定数据触发的时间，或者指定等待多少毫秒等，需要跟ng-model联合配合使用
		取值包括：
		{updateOn: 'event'}规则指定事件发生后绑定数据
		{debounce : 1000} 规定等待多少毫秒后绑定数据
		{allowInvalid : true|false} 规定是否需要验证后绑定数据
		{getterSetter : true|false} 规定是否作为 getters/setters 绑定到模型
		{timezone : '0100'} 规则是否使用时区
	4)	ng-init	定义应用的初始化值
	5)	ng-repeat	定义集合中每项数据的模板
	16)	ng-options	在 <select> 列表中指定 <options>
		使用数组或对象创建一个下拉列表选项。
		ng-options 与 ng-repeat 都可以生成，区别在于：使用 ng-options 的选项的一个对象， ng-repeat 是一个字符串

		例1：使用数组作为数据源
		$scope.sites = [
		    {site : "Google", url : "http://www.google.com"},
		    {site : "Runoob", url : "http://www.runoob.com"},
		    {site : "Taobao", url : "http://www.taobao.com"}
		];
		使用 ng-repeat:
			<select ng-model="selectedSite">
			<option ng-repeat="x in sites" value="{{x.url}}">{{x.site}}</option>
			</select>
			<h1>你选择的是: {{selectedSite}}</h1>

        使用 ng-options:
			<select ng-model="selectedSite" ng-options="x.site for x in sites">
			</select>
			<h1>你选择的是: {{selectedSite.site}}</h1>
			<p>网址为: {{selectedSite.url}}</p>

		例2：使用对象作为数据源 x 为键(key), y 为值(value):
		$scope.sites = {
		    site01 : "Google",
		    site02 : "Runoob",
		    site03 : "Taobao"
		};
		<select ng-model="selectedSite" ng-options="x for (x, y) in sites">
		</select>
		<h1>你选择的值是: {{selectedSite}}</h1>

		例3：使用对象作为数据源 x 为键(key), y 为值(value):
		$scope.cars = {
			car01 : {brand : "Ford", model : "Mustang", color : "red"},
			car02 : {brand : "Fiat", model : "500", color : "white"},
			car03 : {brand : "Volvo", model : "XC90", color : "black"}
		};
		<select ng-model="selectedCar" ng-options="y.brand for (x, y) in sites">
		</select>


	6)	ng-hide	隐藏或显示 HTML 元素
	7)	ng-show	显示或隐藏 HTML 元素
	8)	ng-disabled	规定一个元素是否被禁用	
	9)	ng-readonly	指定元素的 readonly 属性
		例: 
		<input type="checkbox" ng-model="all">
		<br>
		<input type="text" ng-readonly="all">	

	10)	ng-selected	指定元素的 selected 属性
	11)	ng-checked	规定元素是否被选中
	12)	ng-class	指定 HTML 元素使用的 CSS 类
	13)	ng-class-even	类似 ng-class，但只在偶数行起作用
	14)	ng-class-odd	类似 ng-class，但只在奇数行起作用
	15)	ng-href	为 the <a> 元素指定链接
	
	

    18)	ng-include	在应用中包含 HTML 文件
    	<div class="container">
		  <div ng-include="'myUsers_List.htm'"></div>
		  <div ng-include="'myUsers_Form.htm'"></div>
		</div>
    19)	ng-src	指定 <img> 元素的 src 属性	

	20)	ng-bind-html	绑定 HTML 元素的 innerHTML 到应用程序数据，并移除 HTML 字符串中危险字符
		当你想让 AngularJS 在你的应用中写入 HTML，你就需要去检测一些危险代码。通过在应用中引入 "angular-santize.js" 模块，使用 ngSanitize 函数来检测代码的安全性。
		例：
		<script src="http://apps.bdimg.com/libs/angular.js/1.5.0-beta.0/angular-sanitize.min.js"></script>
		<p ng-bind-html="myText"></p>
		$scope.myText = "My name is: <h1>John Doe</h1>";

	21)	ng-bind-template	指令用于告诉 AngularJS 将给定表达式的值替换 HTML 元素的内容。
        当你想在 HTML 元素上绑定多个表达式时可以使用 ng-bind-template 指令。
        例：
        <div ng-app="myApp" ng-bind-template="{{firstName}} {{lastName}}" ng-controller="myCtrl"></div>	
        $scope.firstName = "John";
    	$scope.lastName = "Doe";

	22)	ng-cloak	在应用正要加载时防止其闪烁		
	23)	ng-form	指定 HTML 表单继承控制器表单	
	24)	ng-if	如果条件为 false 移除 HTML 元素	
	25)	ng-jq	定义应用必须使用到的库，如：jQuery	
	26)	ng-list	将文本转换为列表 (数组)		
	28)	ng-non-bindable	规定元素或子元素不能绑定数据
	29)	ng-open	指定元素的 open 属性
	30)	ng-pluralize	根据本地化规则显示信息
	31)	ng-srcset	指定 <img> 元素的 srcset 属性
	32)	ng-style	指定元素的 style 属性
	33)	ng-submit	规定 onsubmit 事件发生时执行的表达式
	34)	ng-switch	规定显示或隐藏子元素的条件
	35)	ng-transclude	规定填充的目标位置
	36)	ng-value	规定 input 元素的值
	37) 创建自定义指令实例：
		var app = angular.module("myApp", []);
		app.directive("runoobDirective", function() {
	    	return {
	        	template : "<h1>自定义指令!</h1>"
	    	};
		});
		通过以下方式来调用指令：
		元素名：<runoob-directive></runoob-directive>
		属性：<div runoob-directive></div>
		类名：<div class="runoob-directive"></div>
		注释：<!-- 指令: runoob-directive -->

6、	Angular过滤器
	1)	currency	格式化数字为货币格式。
		例：<p>总价 = {{ (quantity * price) | currency }}</p>

	2)	filter	从数组项中选择一个子集。	
		例：<p><input type="text" ng-model="test"></p>
			<ul>
			  <li ng-repeat="x in names | filter:test | orderBy:'country'">
			    {{ (x.name | uppercase) + ', ' + x.country }}
			  </li>
			</ul>

	3)	orderBy	根据某个表达式排列数组。
		例：<li ng-repeat="x in names | orderBy:'country'">
    		{{ x.name + ', ' + x.country }}
  			</li>

	4)	lowercase	格式化字符串为小写。
		例：<p>姓名为 {{ lastName | uppercase }}</p>

	5)	uppercase	格式化字符串为大写。

	6)	创建自定义过滤器
		app.filter('data_format', function () {
            return function (x) {
                if (x != '--') {
                    var date = new Date(Date.parse(x.replace(/-/g, "/"))); //转换成Data();
                    return date.getFullYear() + '/' + (date.getMonth()+1) + '/' + date.getDate();
                }
                else {
                    return '--';
                }            
            };
        });

7、	AngularJS 表达式
	表达式是放在{{}}双大括号内的，与ng-bind 指令有异曲同工之妙
8、 Angular全局变量/服务
	1)	$rootScope
		所有的应用都有一个 $rootScope,可作用于整个应用中。是各个 controller 中 scope 的桥梁。
		用 rootscope 定义的值，可以在各个 controller 中使用。

		<div ng-app="myApp" ng-controller="myCtrl">
		<h1>{{lastname}} 家族成员:</h1>
		<ul>
		    <li ng-repeat="x in names">{{x}} {{lastname}}</li>
		</ul>
		</div>
		<script>
		var app = angular.module('myApp', []);
		app.controller('myCtrl', function($scope, $rootScope) {
		    $scope.names = ["Emil", "Tobias", "Linus"];
		    $rootScope.lastname = "Refsnes";
		});
		</script>
	2)	$location 返回当前页面的 URL 地址。
		例：app.controller('customersCtrl', function($scope, $location) {
    			$scope.myUrl = $location.absUrl();
			});
	3)	$http
		例：app.controller('myCtrl', function($scope, $http) {
	    		$http.get("welcome.htm").then(function (response) {
	        	$scope.myWelcome = response.data;
    		});
    		app.controller('myCtrl', function($scope, $http) {
	    		$http.post("welcome.htm").success(function (response) {
	        	$scope.myWelcome = response.data;
    		});
    4)	$timeout  对应了 JS window.setTimeout 函数(只执行一次)。
    	例：app.controller('myCtrl', function($scope, $timeout) {
			    $scope.myHeader = "Hello World!";
			    $timeout(function () {
			        $scope.myHeader = "How are you today?";
			    }, 2000);
			});
	5)	$interval 对应了 JS window.setInterval 函数(执行多次)
		例：app.controller('myCtrl', function($scope, $interval) {
			    $scope.theTime = new Date().toLocaleTimeString();
			    $interval(function () {
			        $scope.theTime = new Date().toLocaleTimeString();
			    }, 1000);
			});
	6)	创建自定义服务
		app.service('hexafy', function() {
	        this.myFunc = function (x) {
	        	return x.toString(16);
		    }
		});
		应用自定义服务
		app.controller('myCtrl', function($scope, hexafy) {
		    $scope.hex = hexafy.myFunc(255);
		});

9、	其他
	1)	控制器方法定义
		<script>
		var app = angular.module('myApp', []);
		app.controller('personCtrl', function($scope) {
		    $scope.firstName = "John";
		    $scope.lastName = "Doe";
		    $scope.fullName = function() {
		        return $scope.firstName + " " + $scope.lastName;
		    }
		});
		</script>
	2)	AngularJS 表格
		可以在 <td> 中添加序号 $index: 
		<table>
		  <tr ng-repeat="x in names">
		    <td>{{ $index + 1 }}</td>
		    <td>{{ x.Name }}</td>
		    <td>{{ x.Country }}</td>
		  </tr>
		</table>

		使用$even 和 $odd
		<table>
			<tr ng-repeat="x in names">
				<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Name }}</td>
				<td ng-if="$even">{{ x.Name }}</td>
				<td ng-if="$odd" style="background-color:#f1f1f1">{{ x.Country }}</td>
				<td ng-if="$even">{{ x.Country }}</td>
			</tr>
		</table>
		





